<?php


namespace WilokeListingToolsTests\Controllers;


use PHPUnit\Framework\TestCase;
use ReflectionClass;
use Wiloke;
use WilokeListingTools\Framework\Helpers\General;
use WilokeListingTools\Framework\Helpers\GetWilokeSubmission;
use WilokeListingTools\Framework\Helpers\SetSettings;
use WilokeListingTools\Register\WilokeSubmission;
use WilokeListingToolsTests\HTTP;

class CommonController extends TestCase
{
    use HTTP;

    public array $aContributor
        = [
            'username' => 'contributor',
            'password' => 'contributor',
            'roles'    => 'contributor'
        ];

    protected array $aContributorAccount
        = [
            'username' => 'test',
            'password' => 'test',
            'auth'     => 'ERqEabLvmBcr7U7r38d3WtWr'
        ];

    protected array $aCreatedAccountIds = [];

    public function getEvents($hook = ''): array
    {
        $aCronJobs = get_option('cron');
        if (empty($aCronJobs)) {
            return [];
        }

        $aSchedules = [];
        foreach ($aCronJobs as $aEventGroup) {
            if (!is_array($aEventGroup)) {
                continue;
            }

            foreach ($aEventGroup as $currentHook => $aEvents) {
                if ($currentHook == $hook) {
                    $aSchedules = array_merge($aSchedules, $aEvents);
                }
            }
        }

        return $aSchedules;
    }

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->configureAPI();
        $this->aGeneralSettings['SAMPLE_DATA_DIR'] = dirname(plugin_dir_path(__FILE__)) . '/sample-data/';
        $this->commandConfiguration();
    }

    public function commandConfiguration()
    {
        if (!$this->isUpdatedUnitTestConfiguration()) {
            $this->setupPostTypes();
            $this->setThemeOptions();
            $this->setDefaultWilokeSubmission();
            $this->setUpdatedUnitTestConfiguration();
        }
    }

    public function setupPostTypes()
    {
        $content = file_get_contents($this->aGeneralSettings['SAMPLE_DATA_DIR'] . 'post-types.json');
        $aData = json_decode($content, true);

        SetSettings::setOptions(
            wilokeListingToolsRepository()->get('addlisting:customPostTypesKey'),
            $aData['settings']['settings'],
            true
        );

        General::getPostTypeKeys(false, false, true);
    }

    protected function setUpdatedUnitTestConfiguration()
    {
        update_option('is_updated_unit_test_configuration', 'yes');
    }

    public function isUpdatedUnitTestConfiguration(): bool
    {
        return (get_option('is_updated_unit_test_configuration') == 'yes');
    }

    protected function setThemeOptions()
    {
        $content = file_get_contents($this->aGeneralSettings['SAMPLE_DATA_DIR'] . 'theme-options.json');
        update_option('wiloke_themeoptions', json_decode($content, true));
        Wiloke::getThemeOptions(true);
    }

    protected function setDefaultWilokeSubmission()
    {
        $content = file_get_contents($this->aGeneralSettings['SAMPLE_DATA_DIR'] . 'wiloke-submission.json');
        $aConfigs = wilokeListingToolsRepository()->get('submission-pages');
        $aWilokeSubmission = json_decode($content, true);

        foreach ($aConfigs as $aPage) {
            $check = isset($aWilokeSubmission[$aPage['key']]) ? $aWilokeSubmission[$aPage['key']] : '';
            if (!empty($check)) {
                if (get_post_status($check) == 'publish') {
                    continue;
                }
            }

            $postID = wp_insert_post([
                'post_title'   => $aPage['title'],
                'post_content' => $aPage['content'],
                'post_status'  => 'publish',
                'post_type'    => 'page'
            ]);

            if (!empty($postID) && !is_wp_error($postID)) {
                if (!empty($aPage['template'])) {
                    update_post_meta($postID, '_wp_page_template', $aPage['template']);
                }

                $aWilokeSubmission[$aPage['key']] = $postID;
            }
        }

        SetSettings::setOptions(WilokeSubmission::$optionKey, $aWilokeSubmission, true);
    }

    protected function setIsTestFlag($postId)
    {
        update_post_meta($postId, 'is_test', 'yes');
    }

    protected function deleteTestData()
    {
        $query = new \WP_Query([
            'post_type'      => 'any',
            'posts_per_page' => -1,
            'post_status'    => ['trash', 'unpaid', 'publish', 'expired'],
            'meta_query'     => [
                [
                    'key'   => 'is_test',
                    'value' => 'yes'
                ]
            ]
        ]);

        if ($query->have_posts()) {
            while ($query->have_posts()) {
                $query->the_post();

                SetSettings::deletePostMeta($query->post->ID, 'belongs_to');
                wp_delete_post($query->post->ID, true);
            }
        }
    }

    /**
     * @param $object
     * @param $methodName
     * @param array $aParams
     * @return mixed
     * @throws \ReflectionException
     */
    public function invokeMethod($object, $methodName, array $aParams = [])
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getMethod($methodName);
        $method->setAccessible(true);

        return $method->invokeArgs($object, $aParams);
    }


    public function setPrivateProperty($object, $propertyName, $params)
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getProperty($propertyName);
        $method->setAccessible(true);

        $method->setValue($object, $params);
    }

    public function getPrivateProperty($object, $propertyName)
    {
        $reflection = new \ReflectionClass(get_class($object));
        $method = $reflection->getProperty($propertyName);
        $method->setAccessible(true);

        return $method->getValue($object);
    }

    /**
     * @params array{username: string, password: string, roles: array}
     * @param array $aUser
     *
     * @return bool
     */
    public function createWilcityUser(array $aUser)
    {
        $aOriginalUserInfo = $aUser;
        if (username_exists($aUser['username'])) {
            $oUser = get_user_by('login', $aUser['username']);
            wp_set_password($aUser['password'], $oUser->ID);
            unset($aUser['username']);
            unset($aUser['password']);
            unset($aUser['auth']);

            if (!empty($aUser)) {
                $aUser['ID'] = $oUser->ID;
                wp_update_user($aUser);
            }

            $this->aCreatedAccountIds[] = $oUser->ID;

            $userId = $oUser->ID;
        } else {
            $userId = wp_create_user($aUser['username'], $aUser['password']);
            if (empty($userId) || is_wp_error($userId)) {
                $aUser['ID'] = $userId;
                unset($aUser['username']);
                unset($aUser['password']);

                wp_update_user($aUser);
                $this->aCreatedAccountIds[] = $userId;
                $oUser = new \WP_User($userId);
            } else {
                $oUser = new \WP_User($userId);
            }
        }

        if (!empty($userId) && !is_wp_error($userId)) {
            $aApplication = \WP_Application_Passwords::create_new_application_password($userId, ['name' => 'test']);
            $this->addAccounts(
                $aOriginalUserInfo['username'],
                [
                    'username' => $aOriginalUserInfo['username'],
                    'password' => $aOriginalUserInfo['password'],
                    'auth'     => $aApplication[0]
                ]
            );

            SetSettings::setUserMeta($oUser->ID, 'confirmed', true);
            $oUser->remove_role('subscriber');

            if (isset($aUser['roles'])) {
                $aRoles = is_array($aUser['roles']) ? $aUser['roles'] : explode(',', $aUser['roles']);

                foreach ($aRoles as $role) {
                    $oUser->add_role($role);
                }
            }

        }
        return false;
    }
}
